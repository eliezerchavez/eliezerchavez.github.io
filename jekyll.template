---
AWSTemplateFormatVersion: 2010-09-09
Description: eliezer.io WordPress Stack

Metadata:

  Authors:
    Description: Eliezer Chavez (ec@eliezer.io)
  License:
    Description: 'Copyright 2020. All Rights Reserved.
                  SPDX-License-Identifier: MIT-0'

  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: General
      Parameters:
      - EnvironmentType
    - Label:
        default: Network Configuration
      Parameters:
      - VPCCIDR
      - SubnetCIDR
    - Label:
        default: WordPress Instance Configuration
      Parameters:
      - ImageId
      - InstanceType
      - KeyPair
    ParameterLabels:
      EnvironmentType:
        default: "Stack's environment"
      VPCCIDR:
        default: CIDR for the VPC
      SubnetCIDR: 
        default: CIDR for the Public Subnet
      ImageId: 
        default: Image Id for the EC2 Bastion instance
      KeyPair: 
        default: SSH keypair for the EC2 Bastion instance

Parameters:
  EnvironmentType:
    AllowedValues: [DEV, STG, PRD]
    ConstraintDescription: Must specify DEV, STG or PRD
    Default: DEV
    Description: An environment name that is prefixed to resource names
    Type: String
  ImageId:
    Description: Image Id
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
  InstanceType:
    AllowedValues: [t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge, m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge]
    ConstraintDescription: Must specify t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge, m5.large, m5.xlarge, m5.2xlarge or m5.4xlarge
    Default: t3.small
    Description: The EC2 instance type to use for the Launch Template
    Type: String
  KeyPair:
    Default: gadolinium
    Description: The EC2 key pair to use for the Launch Template
    Type: AWS::EC2::KeyPair::KeyName
  SubnetCIDR:
    AllowedPattern: '^(10\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})/(1[6-9]|2[0-8]))|(172\.(1[6-9]|2[0-9]|3[0-1])\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})/(1[6-9]|2[0-8]))|(192\.168\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})/(1[6-9]|2[0-8]))$'
    Default: 192.168.0.1/24
    Description: Please enter the IP range (CIDR notation) for the public subnets
    Type: String
  VPCCIDR:
    AllowedPattern: '^(10\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})/(1[6-9]|2[0-8]))|(172\.(1[6-9]|2[0-9]|3[0-1])\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})/(1[6-9]|2[0-8]))|(192\.168\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})\.([0-9]{1,2}|1[0-9]{2}|2[0-5]{2})/(1[6-9]|2[0-8]))$'
    Default: 192.168.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String

Resources:
  VPC:
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - { Key: Name, Value: !Sub '${AWS::StackName} ${EnvironmentType} VPC' }
      - { Key: Environment, Value: !Ref EnvironmentType }
    Type: AWS::EC2::VPC

  InternetGateway:
    Properties:
      Tags:
      - { Key: Name, Value: !Sub '${AWS::StackName} ${EnvironmentType} Internet Gateway' }
      - { Key: Environment, Value: !Ref EnvironmentType }
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Type: AWS::EC2::VPCGatewayAttachment

  WordPressInstanceEIP:
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
      - { Key: Name, Value: !Sub '${AWS::StackName} ${EnvironmentType} Elastic IP 0' }
      - { Key: Environment, Value: !Ref EnvironmentType }
    Type: AWS::EC2::EIP

  WordPressInstanceEIPAssociation:
    Properties: 
      AllocationId: !GetAtt WordPressInstanceEIP.AllocationId
      NetworkInterfaceId: !Ref WordPressIntanceNIC
    Type: AWS::EC2::EIPAssociation

  PublicRouteTable:
    Properties:
      VpcId: !Ref VPC
      Tags:
      - { Key: Name, Value: !Sub '${AWS::StackName} ${EnvironmentType} Public Route Table' }
      - { Key: Environment, Value: !Ref EnvironmentType }
    Type: AWS::EC2::RouteTable
  DefaultPublicRoute:
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Type: AWS::EC2::Route

  PublicSubnet0:
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref SubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
      - { Key: Name, Value: !Sub '${AWS::StackName} ${EnvironmentType} Public SubNet 0' }
      - { Key: Environment, Value: !Ref EnvironmentType }
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet
  PublicSubnet0RouteTableAssociation:
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet0
    Type: AWS::EC2::SubnetRouteTableAssociation

  SecurityGroup0:
    Properties:
      GroupDescription: Enable SSH/HTTP/HTTPS ingress for WordPress Instance
      SecurityGroupIngress:
      - { IpProtocol: tcp, FromPort: 22, ToPort: 22, CidrIp: 0.0.0.0/0 }
      - { IpProtocol: tcp, FromPort: 80, ToPort: 80, CidrIp: 0.0.0.0/0 }
      - { IpProtocol: tcp, FromPort: 443, ToPort: 443, CidrIp: 0.0.0.0/0 }
      Tags:
      - { Key: Name, Value: !Sub '${AWS::StackName} ${EnvironmentType} Security Group 0' }
      - { Key: Environment, Value: !Ref EnvironmentType }
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup

  WordPressIntanceNIC:
    Properties:
      SubnetId: !Ref PublicSubnet0
      Description: Interface for controlling traffic such as SSH/HHTP/HTTPS
      GroupSet: 
      - !Ref SecurityGroup0
      SourceDestCheck: true
      Tags:
      - { Key: Name, Value: !Sub '${AWS::StackName} ${EnvironmentType} WordPress Instance Network Interface 0' }
      - { Key: Environment, Value: !Ref EnvironmentType }
    Type: AWS::EC2::NetworkInterface

  WordPressInstance:
    DependsOn: VPCGatewayAttachment
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      NetworkInterfaces:
        - { NetworkInterfaceId: !Ref WordPressIntanceNIC, DeviceIndex: 0 }
      Tags:
      - { Key: Name, Value: !Sub '${AWS::StackName} ${EnvironmentType} WordPress Instance' }
      - { Key: Environment, Value: !Ref EnvironmentType }
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          timedatectl set-timezone America/Lima

          apt-get update && apt-get upgrade -y
    Type: AWS::EC2::Instance

Outputs:
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub '${AWS::StackName}-${EnvironmentType}-VPC'
    Value: !Ref VPC
  PublicSubnet0:
    Description: 1/2 subnet IDs to use for public servers
    Export:
      Name: !Sub '${AWS::StackName}-${EnvironmentType}-PublicSubnet0'
    Value: !Ref PublicSubnet0
  SecurityGroup0:
    Description: Security Group ID to use for bastion servers
    Export:
      Name: !Sub '${AWS::StackName}-${EnvironmentType}-SecurityGroup0'
    Value: !Ref SecurityGroup0
  WordPressInstance:
    Description: WordPress Instance IP address
    Value: !GetAtt WordPressInstance.PublicIp
